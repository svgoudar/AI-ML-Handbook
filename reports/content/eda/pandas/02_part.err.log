Traceback (most recent call last):
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 664, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\sangouda\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
# 1. From a dictionary of lists
df1 = pd.DataFrame({
    "Name": ["Alice", "Bob", "Charlie"],
    "Age": [24, 30, 22]
})

# 2. From a dictionary of Series
df2 = pd.DataFrame({
    "A": pd.Series([1, 2, 3]),
    "B": pd.Series([10, 20, 30], index=[0, 1, 2])
})

# 3. From a list of dictionaries
df3 = pd.DataFrame([
    {"Name": "Alice", "Age": 24},
    {"Name": "Bob", "Age": 30}
])

# 4. From a list of lists with column names
df4 = pd.DataFrame(
    [[1, "A"], [2, "B"], [3, "C"]],
    columns=["Number", "Letter"]
)

# 5. From a NumPy array
data = np.array([[10, 20], [30, 40], [50, 60]])
df5 = pd.DataFrame(data, columns=["Col1", "Col2"])

# 6. From another DataFrame (copy or subset)
df6 = df1.copy()



# ----------------------------------------------------------
# 5️⃣ From a dictionary of Series
data_dict_series = {
    'Age': pd.Series([25, 30, 35], index=['a', 'b', 'c']),
    'Salary': pd.Series([50000, 60000, 70000], index=['a', 'b', 'c'])
}
df5 = pd.DataFrame(data_dict_series)
print("\n--- DataFrame from dictionary of Series ---")
print(df5)

# ----------------------------------------------------------
# 6️⃣ From a dictionary of dictionaries (row-wise)
data_dict_dicts = {
    'row1': {'Name': 'Alice', 'Age': 25},
    'row2': {'Name': 'Bob', 'Age': 30}
}
df6 = pd.DataFrame.from_dict(data_dict_dicts, orient='index')
print("\n--- DataFrame from dictionary of dictionaries ---")
print(df6)


# ----------------------------------------------------------
# 7️⃣ From a scalar value, filled across rows & columns
df7 = pd.DataFrame(0, index=range(3), columns=['A', 'B'])
print("\n--- DataFrame from scalar value ---")
print(df7)

# ----------------------------------------------------------
# 8️⃣ Copying from another DataFrame
df8 = df1[['Name', 'Salary']].copy()  # select subset of columns
print("\n--- DataFrame copied from another DataFrame ---")
print(df8)
------------------

[31m---------------------------------------------------------------------------[39m
[31mKeyError[39m                                  Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 65[39m
[32m     61[39m [38;5;28mprint[39m(df7)
[32m     63[39m [38;5;66;03m# ----------------------------------------------------------[39;00m
[32m     64[39m [38;5;66;03m# 8️⃣ Copying from another DataFrame[39;00m
[32m---> [39m[32m65[39m df8 = [43mdf1[49m[43m[[49m[43m[[49m[33;43m'[39;49m[33;43mName[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[33;43m'[39;49m[33;43mSalary[39;49m[33;43m'[39;49m[43m][49m[43m][49m.copy()  [38;5;66;03m# select subset of columns[39;00m
[32m     66[39m [38;5;28mprint[39m([33m"[39m[38;5;130;01m\n[39;00m[33m--- DataFrame copied from another DataFrame ---[39m[33m"[39m)
[32m     67[39m [38;5;28mprint[39m(df8)

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\frame.py:4113[39m, in [36mDataFrame.__getitem__[39m[34m(self, key)[39m
[32m   4111[39m     [38;5;28;01mif[39;00m is_iterator(key):
[32m   4112[39m         key = [38;5;28mlist[39m(key)
[32m-> [39m[32m4113[39m     indexer = [38;5;28;43mself[39;49m[43m.[49m[43mcolumns[49m[43m.[49m[43m_get_indexer_strict[49m[43m([49m[43mkey[49m[43m,[49m[43m [49m[33;43m"[39;49m[33;43mcolumns[39;49m[33;43m"[39;49m[43m)[49m[[32m1[39m]
[32m   4115[39m [38;5;66;03m# take() does not accept boolean indexers[39;00m
[32m   4116[39m [38;5;28;01mif[39;00m [38;5;28mgetattr[39m(indexer, [33m"[39m[33mdtype[39m[33m"[39m, [38;5;28;01mNone[39;00m) == [38;5;28mbool[39m:

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexes\base.py:6212[39m, in [36mIndex._get_indexer_strict[39m[34m(self, key, axis_name)[39m
[32m   6209[39m [38;5;28;01melse[39;00m:
[32m   6210[39m     keyarr, indexer, new_indexer = [38;5;28mself[39m._reindex_non_unique(keyarr)
[32m-> [39m[32m6212[39m [38;5;28;43mself[39;49m[43m.[49m[43m_raise_if_missing[49m[43m([49m[43mkeyarr[49m[43m,[49m[43m [49m[43mindexer[49m[43m,[49m[43m [49m[43maxis_name[49m[43m)[49m
[32m   6214[39m keyarr = [38;5;28mself[39m.take(indexer)
[32m   6215[39m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(key, Index):
[32m   6216[39m     [38;5;66;03m# GH 42790 - Preserve name from an Index[39;00m

[36mFile [39m[32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\pandas\core\indexes\base.py:6264[39m, in [36mIndex._raise_if_missing[39m[34m(self, key, indexer, axis_name)[39m
[32m   6261[39m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([33mf[39m[33m"[39m[33mNone of [[39m[38;5;132;01m{[39;00mkey[38;5;132;01m}[39;00m[33m] are in the [[39m[38;5;132;01m{[39;00maxis_name[38;5;132;01m}[39;00m[33m][39m[33m"[39m)
[32m   6263[39m not_found = [38;5;28mlist[39m(ensure_index(key)[missing_mask.nonzero()[[32m0[39m]].unique())
[32m-> [39m[32m6264[39m [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([33mf[39m[33m"[39m[38;5;132;01m{[39;00mnot_found[38;5;132;01m}[39;00m[33m not in index[39m[33m"[39m)

[31mKeyError[39m: "['Salary'] not in index"
KeyError: "['Salary'] not in index"

